# Fly by Night

### a RoR inspired haXe framework targetting PHP

## looking for an MVC framework in PHP ?

+ [CodeIgniter](http://codeigniter.com)
+ [CakePHP](http://cakephp.org)
+ [Symfony](http://www.symfony-project.org)

## looking for a web framework in haXe ?

+ [haXigniter](http://haxigniter.com) [github.com/ciscoheat/haxigniter](https://github.com/ciscoheat/haxigniter)
+ [poko](http://blog.touchmypixel.com/poko-project)
+ [hails](http://code.google.com/p/hails)
+ [BaseHX](http://gitorious.org/basehx)

## Fly by Night is probably not for you!

If you want something like RoR, try [Rails 3](http://rubyonrails.org/)!  
It's awesome and simple to learn

i made "Fly by Night" for me to use (at least for now)  
and have not factored in your needs at all.

This project is at this moment primarily for me to create sites that i want to make, how i want to make them. I like Rails and have been using it for a long time and am far from an expert, i make no claim to understanding the inner workings and theory of frameworks. Ruby is a great language, i am in love with haXe and this project is an experiment to see how haXe would look like on rails.

# Goals and Features

+ ORM that resembles ActiveRecord, just enough for it to work, SPOD?
+ db choices: MySQL sqlite3
+ RESTful resources
+ nested RESTful resources
+ templo? 
+ haml !
+ sass? (i like CSS better)
+ uploader
+ bdd specs (or [munit](https://github.com/massiveinteractive/MassiveUnit)?)
+ environments (atmospheres)
+ routes
+ tight integration with haXe -> swf target
+ migrations?
+ schema (xml?) "schemes"
+ controller filters
+ view helpers
+ model callbacks
+ model namespaces
+ model validations
+ logger
+ controller error handling
+ model error handling
+ view error handling
+ deep tracer for debugging
+ yaml support ! (nYAML)[http://lib.haxe.org/p/nYAML] for now (want to do [yaml2xml](http://flexonrails.net/?cat=34))
+ partials
+ layouts

## Engine Classes

+ AeroModel
+ AeroView
+ AeroController
+ AeroHelper
+ AeroLogger

## Actually built so far

+ engine.Takeoff the boot class
+ config/routes.yml yaml file for routes
+ root path routing
+ routing maps
+ pretty urls through .htaccess
+ auto importing of Controller classes through awesome power of Macros
+ engine.Settings uses env to get and set globals
+ RunwayMacro prepends 'package' and 'using' statements to app files before compile

## Autopilot _scripts_  

all compiled neko scripts are stashed in ./autopilot/  
the projects to build these neko scripts are stored in ./avionics/  

*scripts*  

+ devise _does script/generate_
++ controller
+++ just the controller
++ model
+++ creates migration
++ resource
+++ creates controller
+++ creates model
+++ creates migration
+++ creates views directory
++ restful_resource
+++ creates controller with stubbed restful crud actions
+++ creates model
+++ creates views directory
++++ creates index.haml
++++ creates show.haml
++++ creates edit.haml
++++ creates new.haml
+++ creates restful route
++ scheme _does script/generate migration_
+ engage _does rake db:migrate_
+ abort _does rake db:rollback_

get more info on these scripts by running them with -help

    neko ./autopilot/devise -help
    neko ./autopilot/engage -help
    neko ./autopilot/abort -help

## Database Migrations  

### called _Plot and Schemes_ in the world of Fly by Night

the Engage project is located in ./avionics/engage/  
building the Engage project will output a neko file to ./autopilot/engage  
to engage your schemes (_migrate new migrations_), run thusly  

    neko autopilot/engage

to abort your plans (_undo last migration_), do this  
_like rake db:migrate:down_

    neko autopilot/abort
        
to create a new scheme (_migration_)  

    neko autopilot/devise scheme create users

this will create 

    class Scheme_20110124163010_CreateUsers extends AeroScheme, implements IScheme{
      public function engage():Void
      {
        create_table('users', {

        });
      }
      public function abort():Void
      {
        drop_table('users');
      }
    }
    
sample create users scheme

    class Scheme_20110124163010_CreateUsers extends AeroScheme, implements IScheme{
      public function engage():Void
      {
        create_table('users', {
           no_id : false,
           
        });
      }
      public function abort():Void
      {
        drop_table('users');
      }
    }

the schemes filesystem looks like this  

+ /plot/
++ /plot/schemes.yml
++ /plot/schemes/ 
+++ /plot/schemes/201101241630_create_users.yml

### Create Table

    create_table("table_name", {option:value}, 'yaml formatted column config');
    
    
## Crates .cr8 packages  

/autopilot/load_crate haml.cr8
/autopilot/load_crate theRemix/yaml.cr8

installs git submodules into /cargo/ directory

## files structure

+ build.hxml _main haXe build file_
+ README.mkd _this file_
+ app
++ controllers
++ models
++ views
++ helpers
+ engine _core Fly by Night files_
++ AeroController.hx
++ AeroHelper.hx
++ AeroLogger.hx
++ AeroModel.hx
++ AeroView.hx
++ HTTPVerb.hx
++ ImportClasses.hx _autogenerated by Macro, so is on .gitignore_
++ ImportClassesMacro.hx _the macro to generate ImportClasses.hx_
++ RestfulRoute.hx _extends Route_
++ Route.hx _route object and dispatcher_
++ Routes.hx _enum of all usable routes_
++ Settings.hx _get and stores env variables_
++ Takeoff.hx _boot class_
+ config _all YAML config files go here_
++ routes.yml _routes config file_
+ plot _db directory_
++ schemes.yml _schema definition_
++ schemes _migrations directory_
+ dock _app documentation directory_
+ blackbox _log directory_
+ autopilot _scripts directory_
+ avionics _projects to build autopilot scripts, uses git submodules_
+ cargo _all plugins go here, install using git submodules_
+ runway _tmp directory, RunwayMacro uses this to stage app files_
+ deploy _webroot points here_
++ index.php _automatically generated by compiling haXe to php_
++ images
++ javascripts
++ stylesheets
++ lib _automatically generated by haXe_